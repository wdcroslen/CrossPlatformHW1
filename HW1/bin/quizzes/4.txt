{response: true, quiz: {name: Quiz 04, question: [{type: 1, stem: Consider an expression: shape is Circle. Which of the following statements is correct? , answer: 3, option: [It is not well-formed, as "is" is a method defined in the Object class., It evaluates to true only if shape is an instance of the Circle class., It evaluates to true only if shape is an instance of a class that  implements the interface of Circle. , It evaluates to s true if shape is an instance of a class whose interface  is implemented by Circle. ]}, {type: 1, stem: If the values of x and y are 10 and 20 respectively, what is the value  of an expression x ?? y? , answer: 2, option: [null, 10, 20, undefined; it throws an exception.]}, {type: 1, stem: Consider a statement: z = p..x = 10..y = 20..x. Assume p is not null before the execution of the statement. Which of the following statements about the state after the execution of the statement is correct? , answer: 3, option: [z is null., p.x is 20., z is p and p.x is 10., z is 10 and p.y is 20.]}, {type: 1, stem: The Dart exception handling is similar to that of Java. Which of the following statement is an incorrect description? , answer: 4, option: [All exceptions are unchecked in the sense that you don't have  to handle them. , Anything, say even a string, can be thrown as an exception., There is an optional "on" clause., The "catch" clause is always required.]}, {type: 1, stem: In Dart, there are two kinds of formal parameters for functions: positional and named parameters. Which of the following descriptions is incorrect? , answer: 4, option: [The named parameters are declared after the positional parameters., The positional parameters can be required or optional., The order of named parameters doesn't matter., The named parameters can be used with positional optional parameters., The default values of all parameters (positional and named) are null.]}, {type: 1, stem: In Dart, a function is a first-class citizen in that it can be stored in a variable, passed as an argument to another function, and returned as the result of a function. , answer: 1, option: [true, false]}, {type: 1, stem: In Dart, you cannot define a function inside a function. , answer: 2, option: [true, false]}, {type: 1, stem: While most functions have a name, they don't have to; they can also be anonymous and be defined inline as part of an expression. , answer: 1, option: [true, false]}, {type: 2, stem: A(n) _______________ function returns immediately before it completes the execution of its body, and its return type is always Future. , answer: [async, asynchronous]}, {type: 2, stem: To call a function that returns a Future object, you may use the _______________ keyword to suspend the caller until the called function completes its execution and the result becomes available. , answer: [await]}]}}